# -*- coding: utf-8 -*-
"""Q6_input_normalize.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1f7kCUuDOHfftApIrWG1t-OUn2FVdaxeV
"""
import os
from os import path
if not path.exists('Plots/Question6/'):
  os.makedirs('Plots/Question6/')
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
#from linearRegression.linear_regression import LinearRegression
from sklearn.datasets import make_regression
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt
#TODO : Write here
n_samples = 200
split = 0.8
split_ind = int(n_samples*split)
X, y = make_regression(n_samples=n_samples, n_features=5, random_state=52)
#Preprocess the input using the polynomial features
X_train, y_train = X[:split_ind], y[:split_ind]
X_test, y_test = X[split_ind:], y[split_ind:]


#Solve the resulting linear regression problem by calling any one of the implemented models
scaler = StandardScaler()
norm_train = scaler.fit_transform(X_train)
norm_test = scaler.transform(X_test)

lr_norm = LinearRegression(fit_intercept=True)
lr_norm.fit(norm_train, y_train)

y_pred_norm = lr_norm.predict(norm_test)
error_norm = np.mean((y_test - y_pred_norm)**2)
print("Norm MSE : ",error_norm)
LR = LinearRegression(fit_intercept=True)
LR.fit(X_train,y_train)
y_hat = LR.predict(X_test)
error_unnorm = np.mean((y_hat-y_test)**2)
print("No norm MSE : ",error_unnorm)


plt.bar(['Unnormalized', 'Normalized'], [error_unnorm, error_norm])
plt.ylabel('Mean Squared Error')
plt.savefig('./Plots/Question6/q6 bar.png')
error_unnorm_plot = y_test - y_hat
error_norm_plot = y_test - y_pred_norm
plt.scatter(y_hat, error_unnorm_plot, label='Unnormalized')
plt.scatter(y_pred_norm, error_norm_plot, label='Normalized')
plt.legend()
plt.xlabel('Predicted Values')
plt.ylabel('Errors')
plt.title('Errors for Unnormalized and Normalized Data')
plt.savefig('./Plots/Question6/q6 scatter.png')