# -*- coding: utf-8 -*-
"""Q1_test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qS8-5c3lwMfeY1LGlMIEVk-f-5K2bDZC
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from linearRegression.linear_regression import LinearRegression
from sklearn.datasets import make_regression
from metrics import *
import time
import os
from os import path
import seaborn as sns
np.random.seed(45)



N = 5000
P = 30
X = pd.DataFrame(np.random.randn(N, P))
y = pd.Series(np.random.randn(N))
X, y = make_regression(n_samples=5000, n_features=40, n_informative=10, n_targets=1, noise=0.1, random_state=45)
#print(X.shape)
X=pd.DataFrame(X)
y=pd.Series(y)

#Evaluating sklearn's implementation of linear regression

LR = LinearRegression(fit_intercept=True)
LR.fit_sklearn_LR(X,y)
y_hat = LR.predict(X)
print('For sklearn LinearRegression : \n')
print('RMSE: ', rmse(y_hat, y))
print('MAE: ', mae(y_hat, y))
print("---------------------------")


#Evaluating solution of linear regression using normal equations
LR = LinearRegression(fit_intercept=True)
LR.fit_normal_equations(X,y)
y_hat = LR.predict(X)

print('For linear regression using normal equations : \n')
print('RMSE: ', rmse(y_hat, y))
print('MAE: ', mae(y_hat, y))
print("---------------------------")



#Evaluating solution of linear regression using SVD
LR = LinearRegression(fit_intercept=True)
LR.fit_SVD(X,y)
y_hat = LR.predict(X)

print('For linear regression using SVD : \n')
print('RMSE: ', rmse(y_hat, y))
print('MAE: ', mae(y_hat, y))
print("---------------------------")



# input()
# LR = LinearRegression(fit_intercept=True)
# time1 = time.time()
# for i in range(100):
#     LR.fit_sklearn_LR(X,y)
# time2 = time.time()
# LR.predict(X)
# print("Time taken by sklearn: ", (time2-time1)/100)

# LR = LinearRegression(fit_intercept=True)
# time1 = time.time()
# for i in range(100):
#     LR.fit_normal_equations(X,y)
# time2 = time.time()
# LR.predict(X)
# print("Time taken by normal equations: ", (time2-time1)/100)

# LR = LinearRegression(fit_intercept=True)
# time1 = time.time()
# for i in range(100):
#     LR.fit_SVD(X,y)
# time2 = time.time()
# LR.predict(X)
# print("Time taken by SVD: ", (time2-time1)/100)
